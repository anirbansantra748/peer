const mongoose = require('mongoose');

const fileHunkSchema = new mongoose.Schema({
  file: { type: String, required: true },
  ready: { type: Boolean, default: false },
  ok: { type: Boolean, default: true },
  reason: { type: String },
  error: { type: String },
  // Use Mixed to tolerate legacy or partial shapes and avoid cast errors
  hunks: { type: [mongoose.Schema.Types.Mixed], default: [] },
  // Full-file contents for side-by-side preview
  originalText: { type: String },
  improvedText: { type: String },
  // Per-file unified diff for the current file
  unifiedDiff: { type: String },
  // IDs of findings from this run that belong to this file
  findingIds: { type: [String], default: [] },
  // True if the improvedText was generated by an AI full-file rewrite
  aiRewritten: { type: Boolean, default: false },
  // Original file EOL ("\n" or "\r\n") to preserve endings on write
  eol: { type: String },
  // Change summary per file for CI/scoring
  changeSummary: {
    file: String,
    patches: [{ findingId: String, line: Number, type: String, reason: String, warn: String }],
    model: String,
    provider: String,
    timestamp: Date,
  },
}, { _id: false });

const previewSchema = new mongoose.Schema({
  unifiedDiff: { type: String },
  files: [fileHunkSchema],
  // Progressive preview support
  filesExpected: { type: Number },
}, { _id: false, strict: true });

const resultSchema = new mongoose.Schema({
  branchName: { type: String },
  commitSha: { type: String },
  applied: [{ findingId: String, file: String }],
  skipped: [{ findingId: String, file: String, reason: String }],
  errors: [{ message: String, stack: String }],
}, { _id: false });

const patchRequestSchema = new mongoose.Schema({
  runId: { type: String, index: true, required: true },
  repo: { type: String, required: true },
  prNumber: { type: Number, required: true },
  sha: { type: String, required: true },
  selectedFindingIds: { type: [String], default: [] },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    index: true
  },
  status: { type: String, enum: ['queued', 'preview_partial', 'preview_ready', 'applying', 'completed', 'failed'], default: 'queued', index: true },
  preview: { type: previewSchema },
  results: { type: resultSchema },
}, { timestamps: true });

module.exports = mongoose.model('PatchRequest', patchRequestSchema);
