<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title><%= title %></title>
    <style>
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
        padding: 24px; 
        background: #0d1117;
        color: #c9d1d9;
      }
      .container { max-width: 1400px; margin: 0 auto; }
      h1 { margin-bottom: 12px; color: #58a6ff; font-size: 28px; font-weight: 700; }
      
      /* Summary Panel */
      .summary {
        background: #161b22;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 24px;
        border: 1px solid #30363d;
      }
      .summary-title { font-size: 18px; font-weight: 600; margin-bottom: 12px; color: #c9d1d9; }
      .summary-stats {
        display: flex;
        gap: 24px;
        margin-bottom: 16px;
        flex-wrap: wrap;
      }
      .stat-box {
        display: flex;
        align-items: center;
        gap: 8px;
      }
      .stat-icon { font-size: 24px; }
      .stat-count { font-size: 24px; font-weight: bold; }
      .stat-label { font-size: 14px; color: #8b949e; }
      .summary-info {
        background: #0d1117;
        padding: 12px;
        border-radius: 6px;
        font-size: 14px;
        color: #8b949e;
        border: 1px solid #21262d;
      }
      
      /* Toolbar */
      .toolbar {
        background: #161b22;
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 16px;
        border: 1px solid #30363d;
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        align-items: center;
      }
      .toolbar select, .toolbar input {
        padding: 8px 12px;
        border: 1px solid #30363d;
        border-radius: 6px;
        font-size: 14px;
        background: #0d1117;
        color: #c9d1d9;
      }
      .toolbar select:focus, .toolbar input:focus {
        outline: none;
        border-color: #58a6ff;
      }
      .toolbar input[type="text"] { width: 320px; }
      .toolbar button {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
      }
      .btn-primary { background: #1f6feb; color: white; }
      .btn-primary:hover { background: #1a5ad8; }
      .btn-secondary { background: #21262d; color: #c9d1d9; border: 1px solid #30363d; }
      .btn-secondary:hover { background: #30363d; }
      .btn-danger { background: #da3633; color: white; }
      .btn-danger:hover { background: #b62324; }
      .btn-success { background: #238636; color: white; }
      .btn-success:hover { background: #2ea043; }
      .btn-warning { background: #f0883e; color: white; }
      .btn-warning:hover { background: #d67e3a; }
      .toolbar .error { color: #f85149; font-weight: 500; }
      
      /* Step Tracker */
      .step-tracker {
        background: #161b22;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 24px;
        border: 1px solid #30363d;
      }
      .steps {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
      }
      .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        flex: 1;
        position: relative;
      }
      .step-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #21262d;
        color: #8b949e;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: 600;
        position: relative;
        z-index: 2;
        transition: all 0.3s;
        border: 2px solid #30363d;
      }
      .step.completed .step-icon {
        background: #238636;
        color: white;
        border-color: #2ea043;
      }
      .step.active .step-icon {
        background: #1f6feb;
        color: white;
        border-color: #58a6ff;
        box-shadow: 0 0 0 4px rgba(31, 111, 235, 0.2);
      }
      .step-label {
        font-size: 12px;
        color: #8b949e;
        font-weight: 500;
        text-align: center;
      }
      .step.completed .step-label, .step.active .step-label {
        color: #c9d1d9;
        font-weight: 600;
      }
      .step-connector {
        position: absolute;
        top: 20px;
        left: 50%;
        right: -50%;
        height: 2px;
        background: #21262d;
        z-index: 1;
      }
      .step:last-child .step-connector { display: none; }
      .step.completed .step-connector {
        background: #238636;
      }
      
      /* Issue Table */
      .issues-table {
        background: #161b22;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #30363d;
      }
      .issue-row {
        border-bottom: 1px solid #21262d;
        padding: 16px;
        display: flex;
        gap: 16px;
        align-items: flex-start;
        transition: background 0.2s;
      }
      .issue-row:hover { background: #0d1117; }
      .issue-row.hidden { display: none; }
      
      .issue-checkbox { flex-shrink: 0; padding-top: 2px; }
      .issue-checkbox input { 
        width: 18px; 
        height: 18px; 
        cursor: pointer;
        accent-color: #1f6feb;
      }
      
      .issue-category {
        flex-shrink: 0;
        width: 120px;
      }
      .category-badge {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      .category-BLOCKING {
        background: rgba(248, 81, 73, 0.15);
        color: #ff7b72;
        border: 2px solid #da3633;
      }
      .category-URGENT {
        background: rgba(187, 128, 9, 0.15);
        color: #f0883e;
        border: 2px solid #d29922;
      }
      .category-RECOMMENDED {
        background: rgba(56, 139, 253, 0.15);
        color: #79c0ff;
        border: 2px solid #1f6feb;
      }
      .category-OPTIONAL {
        background: rgba(46, 160, 67, 0.15);
        color: #56d364;
        border: 2px solid #238636;
      }
      
      .issue-content { flex: 1; min-width: 0; }
      .issue-file {
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 13px;
        color: #58a6ff;
        margin-bottom: 6px;
        font-weight: 500;
      }
      .issue-rule {
        background: #21262d;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-family: monospace;
        display: inline-block;
        margin-bottom: 6px;
        color: #8b949e;
        border: 1px solid #30363d;
      }
      .issue-message {
        color: #c9d1d9;
        font-size: 14px;
        margin-bottom: 8px;
        line-height: 1.5;
      }
      .issue-meta {
        display: flex;
        gap: 16px;
        font-size: 12px;
        color: #8b949e;
      }
      .meta-impact { color: #ff7b72; font-weight: 500; }
      .meta-effort { color: #56d364; font-weight: 500; }
      .consequence-box {
        background: rgba(187, 128, 9, 0.15);
        border-left: 4px solid #d29922;
        padding: 8px 12px;
        margin-top: 8px;
        font-size: 13px;
        color: #f0883e;
        border-radius: 4px;
      }
      .consequence-box.blocking {
        background: rgba(248, 81, 73, 0.15);
        border-color: #da3633;
        color: #ff7b72;
      }
      
      /* Submit Bar */
      .submit-bar {
        position: sticky;
        bottom: 0;
        background: #161b22;
        padding: 16px;
        border-radius: 8px;
        margin-top: 24px;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.3);
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid #30363d;
      }
      .selection-count {
        font-size: 16px;
        font-weight: 600;
        color: #c9d1d9;
      }
      .submit-actions { display: flex; gap: 12px; align-items: center; }
      .submit-actions button {
        padding: 12px 24px;
        font-size: 16px;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
      }
      .submit-actions a {
        color: #c9d1d9;
      }
      
      /* Modal */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(1, 4, 9, 0.8);
        z-index: 1000;
        align-items: center;
        justify-content: center;
      }
      .modal.active { display: flex; }
      .modal-content {
        background: #161b22;
        padding: 32px;
        border-radius: 12px;
        max-width: 600px;
        margin: 20px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.5);
        border: 1px solid #30363d;
      }
      .modal-title {
        font-size: 24px;
        font-weight: 700;
        color: #ff7b72;
        margin-bottom: 16px;
      }
      .modal-body { 
        margin-bottom: 24px; 
        line-height: 1.6;
        color: #c9d1d9;
      }
      .modal-list {
        background: #0d1117;
        padding: 16px;
        border-radius: 6px;
        margin: 16px 0;
        border: 1px solid #21262d;
      }
      .modal-list li {
        margin: 8px 0;
        padding-left: 8px;
        color: #c9d1d9;
      }
      .modal-confirmation {
        margin-top: 16px;
      }
      .modal-confirmation label {
        color: #c9d1d9;
      }
      .modal-confirmation input {
        padding: 8px;
        width: 100%;
        border: 2px solid #30363d;
        border-radius: 6px;
        font-size: 14px;
        background: #0d1117;
        color: #c9d1d9;
      }
      .modal-confirmation input:focus {
        outline: none;
        border-color: #58a6ff;
      }
      .modal-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>🔍 Select Issues to Fix — Run <%= runId %></h1>
      <div style="margin:6px 0 18px;color:#8b949e;font-size:14px;">
        Repository: <code><%= run?.repo %></code> • PR: <code>#<%= run?.prNumber %></code> • Findings: <strong><%= (run?.findings||[]).length %></strong>
      </div>
      
      <!-- Step Tracker -->
      <div class="step-tracker">
        <div class="steps">
          <div class="step completed">
            <div class="step-icon">✓</div>
            <div class="step-label">PR Detected</div>
            <div class="step-connector"></div>
          </div>
          <div class="step completed">
            <div class="step-icon">✓</div>
            <div class="step-label">Analysis Done</div>
            <div class="step-connector"></div>
          </div>
          <div class="step active">
            <div class="step-icon">3</div>
            <div class="step-label">Select Issues</div>
            <div class="step-connector"></div>
          </div>
          <div class="step">
            <div class="step-icon">4</div>
            <div class="step-label">Preview Fixes</div>
            <div class="step-connector"></div>
          </div>
          <div class="step">
            <div class="step-icon">5</div>
            <div class="step-label">Apply & Merge</div>
          </div>
        </div>
      </div>
      
      <!-- Summary Panel -->
      <div class="summary">
        <div class="summary-title">📊 Issue Summary</div>
        <div class="summary-stats">
          <div class="stat-box">
            <span class="stat-icon">🔴</span>
            <div>
              <div class="stat-count" style="color: #c00;"><%= summary.counts.BLOCKING %></div>
              <div class="stat-label">BLOCKING</div>
            </div>
          </div>
          <div class="stat-box">
            <span class="stat-icon">🟠</span>
            <div>
              <div class="stat-count" style="color: #ff8800;"><%= summary.counts.URGENT %></div>
              <div class="stat-label">URGENT</div>
            </div>
          </div>
          <div class="stat-box">
            <span class="stat-icon">🟡</span>
            <div>
              <div class="stat-count" style="color: #0099cc;"><%= summary.counts.RECOMMENDED %></div>
              <div class="stat-label">RECOMMENDED</div>
            </div>
          </div>
          <div class="stat-box">
            <span class="stat-icon">🟢</span>
            <div>
              <div class="stat-count" style="color: #28a745;"><%= summary.counts.OPTIONAL %></div>
              <div class="stat-label">OPTIONAL</div>
            </div>
          </div>
        </div>
        <div class="summary-info">
          <strong><%= summary.total %></strong> total issues found • 
          <strong><%= summary.blockingCount %></strong> require immediate attention • 
          Estimated time: <strong><%= summary.totalEstimatedTime %></strong>
        </div>
      </div>
      
      <!-- Toolbar -->
      <form method="post" action="/runs/<%= runId %>/preview" id="selectForm">
        <div class="toolbar">
          <select id="categoryFilter">
            <option value="">All Categories</option>
            <option value="BLOCKING">🔴 BLOCKING</option>
            <option value="URGENT">🟠 URGENT</option>
            <option value="RECOMMENDED">🟡 RECOMMENDED</option>
            <option value="OPTIONAL">🟢 OPTIONAL</option>
          </select>
          <input type="text" id="search" placeholder="Search file, rule, or message...">
          <button type="button" class="btn-danger" id="selectBlocking">Select BLOCKING</button>
          <button type="button" class="btn-warning" id="selectUrgent">Select URGENT</button>
          <button type="button" class="btn-secondary" id="selectRecommended">Select RECOMMENDED</button>
          <button type="button" class="btn-secondary" id="selectOptional">Select OPTIONAL</button>
          <button type="button" class="btn-secondary" id="selectAll">Select ALL</button>
          <button type="button" class="btn-secondary" id="invertSel">Invert</button>
          <button type="button" class="btn-secondary" id="clearAll">Clear All</button>
          <% if (typeof query !== 'undefined' && query.err) { %>
            <span class="error"><%= query.err %></span>
          <% } %>
        </div>
        
        <!-- Issues List -->
        <div class="issues-table">
          <% findings.forEach(f => { %>
            <div class="issue-row" 
                 data-category="<%= f.category %>" 
                 data-file="<%= f.file %>" 
                 data-rule="<%= f.rule %>" 
                 data-msg="<%= f.message %>"
                 data-can-skip="<%= f.canSkip %>">
              
              <div class="issue-checkbox">
                <input type="checkbox" 
                       name="selectedFindingIds[]" 
                       value="<%= String(f._id) %>"
                       <%= f.category === 'BLOCKING' ? 'checked' : '' %>>
              </div>
              
              <div class="issue-category">
                <span class="category-badge category-<%= f.category %>">
                  <%= f.category === 'BLOCKING' ? '🔴' : f.category === 'URGENT' ? '🟠' : f.category === 'RECOMMENDED' ? '🟡' : '🟢' %>
                  <%= f.category %>
                </span>
              </div>
              
              <div class="issue-content">
                <div class="issue-file">📁 <%= f.file %>:<%= f.line %></div>
                <div class="issue-rule"><%= f.rule %></div>
                <div class="issue-message"><%= f.message %></div>
                <div class="issue-meta">
                  <span class="meta-impact">💥 <%= f.impact %></span>
                  <span class="meta-effort">⏱️ <%= f.effort %></span>
                </div>
                <% if (f.category === 'BLOCKING' || f.category === 'URGENT') { %>
                  <div class="consequence-box <%= f.category === 'BLOCKING' ? 'blocking' : '' %>">
                    ⚠️ <strong>If you skip:</strong> <%= f.consequence %>
                  </div>
                <% } %>
              </div>
            </div>
          <% }) %>
        </div>
        
        <!-- Submit Bar -->
        <div class="submit-bar">
          <div class="selection-count" id="selectionCount">0 issues selected</div>
          <div class="submit-actions">
            <div id="selectedBreakdown" style="font-size:12px;color:#8b949e;margin-right:12px;display:none;"></div>
            <a href="/" class="btn-secondary" style="padding: 12px 24px; text-decoration: none; display: inline-block;">Cancel</a>
            <button type="submit" class="btn-success">Fix Selected Issues →</button>
          </div>
        </div>
      </form>
    </div>
    
    <!-- Skip Warning Modal -->
    <div class="modal" id="skipModal">
      <div class="modal-content">
        <div class="modal-title">⚠️ Warning: Skipping BLOCKING Issues</div>
        <div class="modal-body">
          <p>You're about to skip <strong id="skipCount">0</strong> BLOCKING issues that <strong>WILL cause serious problems:</strong></p>
          <ul class="modal-list" id="skipList"></ul>
          <p style="margin-top: 16px; color: #ff7b72; font-weight: 600;">
            These issues can compromise security, crash your app, or cause data loss in production.
          </p>
          <div class="modal-confirmation">
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">
              Type "I understand the risks" to proceed:
            </label>
            <input type="text" id="confirmText" placeholder="I understand the risks">
          </div>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn-secondary" id="modalCancel">Go Back & Fix Them</button>
          <button type="button" class="btn-danger" id="modalConfirm" disabled>Skip Anyway</button>
        </div>
      </div>
    </div>

    <script>
      const form = document.getElementById('selectForm');
      const categoryFilter = document.getElementById('categoryFilter');
      const search = document.getElementById('search');
      const selectBlocking = document.getElementById('selectBlocking');
      const selectUrgent = document.getElementById('selectUrgent');
      const selectRecommended = document.getElementById('selectRecommended');
      const selectOptional = document.getElementById('selectOptional');
      const selectAll = document.getElementById('selectAll');
      const invertSel = document.getElementById('invertSel');
      const clearAll = document.getElementById('clearAll');
      const selectionCount = document.getElementById('selectionCount');
      const selectedBreakdown = document.getElementById('selectedBreakdown');
      const skipModal = document.getElementById('skipModal');
      const modalCancel = document.getElementById('modalCancel');
      const modalConfirm = document.getElementById('modalConfirm');
      const confirmText = document.getElementById('confirmText');
      
      function computeSelectedSummary() {
        const sel = Array.from(document.querySelectorAll('.issue-row input[type=checkbox]:checked')).map(cb => cb.closest('.issue-row'));
        const counts = { BLOCKING:0, URGENT:0, RECOMMENDED:0, OPTIONAL:0 };
        let mins = 0;
        sel.forEach(row => {
          const cat = row.getAttribute('data-category');
          counts[cat] = (counts[cat]||0)+1;
          const effort = (row.querySelector('.meta-effort')?.textContent || '').match(/(\d+)/);
          mins += effort ? parseInt(effort[1],10) : 5;
        });
        return { counts, total: sel.length, mins };
      }
      
      // Update selection count
      function updateCount() {
        const { counts, total, mins } = computeSelectedSummary();
        selectionCount.textContent = total === 1 ? '1 issue selected' : `${total} issues selected`;
        selectedBreakdown.style.display = total ? 'inline-block' : 'none';
        selectedBreakdown.textContent = `🔴 ${counts.BLOCKING} • 🟠 ${counts.URGENT} • 🟡 ${counts.RECOMMENDED} • 🟢 ${counts.OPTIONAL} • ⏱️ ~${mins} min`;
      }
      
      // Apply filters
      function applyFilters() {
        const cat = categoryFilter.value;
        const q = search.value.toLowerCase();
        document.querySelectorAll('.issue-row').forEach(row => {
          const matchCat = !cat || row.getAttribute('data-category') === cat;
          const hay = (row.getAttribute('data-file') + ' ' + row.getAttribute('data-rule') + ' ' + row.getAttribute('data-msg')).toLowerCase();
          const matchText = !q || hay.includes(q);
          row.classList.toggle('hidden', !(matchCat && matchText));
        });
      }
      
      // Batch select buttons
      selectBlocking.addEventListener('click', () => {
        document.querySelectorAll('.issue-row').forEach(row => {
          if (row.getAttribute('data-category') === 'BLOCKING') row.querySelector('input[type=checkbox]').checked = true;
        });
        updateCount();
      });
      selectUrgent.addEventListener('click', () => {
        document.querySelectorAll('.issue-row').forEach(row => {
          const cat = row.getAttribute('data-category');
          if (cat === 'BLOCKING' || cat === 'URGENT') row.querySelector('input[type=checkbox]').checked = true;
        });
        updateCount();
      });
      selectRecommended.addEventListener('click', () => {
        document.querySelectorAll('.issue-row').forEach(row => {
          if (row.getAttribute('data-category') === 'RECOMMENDED') row.querySelector('input[type=checkbox]').checked = true;
        });
        updateCount();
      });
      selectOptional.addEventListener('click', () => {
        document.querySelectorAll('.issue-row').forEach(row => {
          if (row.getAttribute('data-category') === 'OPTIONAL') row.querySelector('input[type=checkbox]').checked = true;
        });
        updateCount();
      });
      selectAll.addEventListener('click', () => {
        document.querySelectorAll('.issue-row input[type=checkbox]').forEach(cb => cb.checked = true);
        updateCount();
      });
      invertSel.addEventListener('click', () => {
        document.querySelectorAll('.issue-row input[type=checkbox]').forEach(cb => cb.checked = !cb.checked);
        updateCount();
      });
      clearAll.addEventListener('click', () => {
        document.querySelectorAll('.issue-row input[type=checkbox]').forEach(cb => cb.checked = false);
        updateCount();
      });
      
      // Listen to all checkboxes
      document.querySelectorAll('.issue-row input[type=checkbox]').forEach(cb => {
        cb.addEventListener('change', updateCount);
      });
      
      // Filter listeners
      categoryFilter.addEventListener('change', applyFilters);
      search.addEventListener('input', applyFilters);
      
      // Form submission - check for skipped BLOCKING issues
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const checked = Array.from(document.querySelectorAll('.issue-row input[type=checkbox]:checked'));
        if (checked.length === 0) {
          alert('Please select at least one issue to fix');
          return;
        }
        
        // Find skipped BLOCKING issues
        const skippedBlocking = [];
        document.querySelectorAll('.issue-row').forEach(row => {
          const category = row.getAttribute('data-category');
          const canSkip = row.getAttribute('data-can-skip') === 'true';
          const checkbox = row.querySelector('input[type=checkbox]');
          if (category === 'BLOCKING' && !checkbox.checked && !canSkip) {
            const file = row.getAttribute('data-file');
            const msg = row.getAttribute('data-msg');
            skippedBlocking.push({ file, msg });
          }
        });
        
        // If skipping BLOCKING issues, show warning modal
        if (skippedBlocking.length > 0) {
          document.getElementById('skipCount').textContent = skippedBlocking.length;
          const skipList = document.getElementById('skipList');
          skipList.innerHTML = skippedBlocking.map(s => 
            `<li><strong>${s.file}</strong> - ${s.msg}</li>`
          ).join('');
          skipModal.classList.add('active');
        } else {
          // No BLOCKING issues skipped, submit directly
          form.submit();
        }
      });
      
      // Modal confirmation text validation
      confirmText.addEventListener('input', () => {
        const valid = confirmText.value.trim().toLowerCase() === 'i understand the risks';
        modalConfirm.disabled = !valid;
      });
      
      // Modal cancel
      modalCancel.addEventListener('click', () => {
        skipModal.classList.remove('active');
        confirmText.value = '';
      });
      
      // Modal confirm - submit form
      modalConfirm.addEventListener('click', () => {
        skipModal.classList.remove('active');
        form.submit();
      });
      
      // Initialize count
      updateCount();
    </script>
  </body>
</html>
