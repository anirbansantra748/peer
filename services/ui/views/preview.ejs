<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title><%= title %></title>
    <style>
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        padding: 24px; 
        background: #0d1117;
        color: #c9d1d9;
      }
      .container { max-width: 1600px; margin: 0 auto; }
      h1 { color: #58a6ff; font-size: 28px; font-weight: 700; margin-bottom: 8px; }
      .status { 
        padding: 6px 12px; 
        border-radius: 6px; 
        background: #161b22; 
        border: 1px solid #30363d;
        display: inline-block; 
        font-size: 14px;
        color: #58a6ff;
        font-weight: 500;
      }
      .hdr { margin: 6px 0; font-size: 14px; color: #8b949e; }
      .hdr code { 
        background: #161b22; 
        padding: 2px 6px; 
        border-radius: 3px; 
        color: #c9d1d9;
        font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;
      }
      .fileHdr { 
        font-weight: 600; 
        margin: 20px 0 12px; 
        font-size: 16px;
        color: #c9d1d9;
      }
      .diffSummary { 
        margin: 12px 0 20px; 
        color: #8b949e;
        font-size: 14px;
      }
      .panel { 
        background: #0d1117; 
        border: 1px solid #30363d;
        border-radius: 6px; 
        overflow: hidden;
      }
      .codeTbl { 
        width: 100%; 
        border-collapse: collapse;
        background: #161b22;
        border-radius: 6px;
        overflow: hidden;
        border: 1px solid #30363d;
      }
      .codeTbl th { 
        background: #161b22; 
        border-bottom: 2px solid #30363d; 
        padding: 12px 16px; 
        text-align: center; 
        font-weight: 600;
        font-size: 13px;
        color: #8b949e;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      .codeTbl td { 
        vertical-align: top; 
        padding: 0;
        border-left: 1px solid #21262d;
      }
      .codeTbl td:first-child { border-left: none; }
      .codeBlk { 
        display: grid; 
        grid-template-columns: 48px 1fr;
      }
      .lnCol { 
        background: #0d1117; 
        border-right: 1px solid #21262d; 
        color: #6e7681; 
        text-align: right; 
        padding: 4px 8px;
        font-size: 12px;
        user-select: none;
      }
      .codeCol { 
        padding: 4px 12px; 
        white-space: pre; 
        font-size: 13px;
        font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;
        line-height: 20px;
      }
      .removed { background: #2d0f0f; color: #ff7b72; }
      .removed .lnCol { background: #2d0f0f; color: #ff7b72; opacity: 0.7; }
      .added { background: #0d2e0d; color: #7ee787; }
      .added .lnCol { background: #0d2e0d; color: #7ee787; opacity: 0.7; }
      .actions { 
        margin-top: 20px; 
        display: flex;
        gap: 12px;
        align-items: center;
      }
      .btn { 
        display: inline-block; 
        padding: 8px 16px; 
        border: 1px solid #30363d; 
        border-radius: 6px; 
        text-decoration: none; 
        color: #c9d1d9; 
        background: #21262d;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
      }
      .btn:hover { background: #30363d; border-color: #58a6ff; }
      .btn-primary { background: #238636; border-color: #238636; color: white; }
      .btn-primary:hover { background: #2ea043; border-color: #2ea043; }
      /* Step Tracker */
      .step-tracker { 
        background: #161b22; 
        padding: 20px; 
        border-radius: 8px; 
        margin-bottom: 24px;
        border: 1px solid #30363d;
      }
      .steps { display: flex; justify-content: space-between; align-items: center; position: relative; }
      .step { display: flex; flex-direction: column; align-items: center; gap: 8px; flex: 1; position: relative; }
      .step-icon { 
        width: 40px; 
        height: 40px; 
        border-radius: 50%; 
        background: #21262d; 
        color: #8b949e; 
        display: flex; 
        align-items: center; 
        justify-content: center; 
        font-size: 18px; 
        font-weight: 600;
        z-index: 2;
        border: 2px solid #30363d;
        transition: all 0.3s;
      }
      .step.completed .step-icon { background: #238636; color: white; border-color: #2ea043; }
      .step.active .step-icon { background: #1f6feb; color: white; border-color: #58a6ff; box-shadow: 0 0 0 4px rgba(31, 111, 235, 0.2); }
      .step-label { font-size: 12px; color: #8b949e; font-weight: 500; text-align: center; }
      .step.completed .step-label, .step.active .step-label { color: #c9d1d9; font-weight: 600; }
      .step-connector { position: absolute; top: 20px; left: 50%; right: -50%; height: 2px; background: #21262d; z-index: 1; }
      .step:last-child .step-connector { display: none; }
      .step.completed .step-connector { background: #238636; }
      /* Change summary box */
      #change-summary {
        margin: 16px 0;
        padding: 16px;
        background: #161b22;
        border-left: 4px solid #1f6feb;
        border-radius: 6px;
        color: #c9d1d9;
        font-size: 14px;
        line-height: 1.6;
      }
      #change-summary strong { color: #58a6ff; }
      /* Typing animation */
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(3px); }
        to { opacity: 1; transform: translateY(0); }
      }
      .typing-line {
        animation: fadeIn 0.2s ease-out;
        opacity: 0;
      }
      .typing-complete { opacity: 1; }
    </style>
  </head>
  <body>
    <div class="container">
    <!-- Step Tracker -->
    <div class="step-tracker">
      <div class="steps">
        <div class="step completed">
          <div class="step-icon">‚úì</div>
          <div class="step-label">PR Detected</div>
          <div class="step-connector"></div>
        </div>
        <div class="step completed">
          <div class="step-icon">‚úì</div>
          <div class="step-label">Analysis Done</div>
          <div class="step-connector"></div>
        </div>
        <div class="step completed">
          <div class="step-icon">‚úì</div>
          <div class="step-label">Select Issues</div>
          <div class="step-connector"></div>
        </div>
        <div class="step active">
          <div class="step-icon">4</div>
          <div class="step-label">Preview Fixes</div>
          <div class="step-connector"></div>
        </div>
        <div class="step">
          <div class="step-icon">5</div>
          <div class="step-label">Apply & Merge</div>
        </div>
      </div>
    </div>
    
    <h1>üîç Preview Fixes ‚Äî Run <%= runId %></h1>
    <p class="hdr">Status: <span class="status"><%= patch.status %></span></p>

    <% if (!(patch.status === 'preview_ready' || patch.status === 'preview_partial')) { %>
      <p class="hdr">Preview is not ready yet. <a href="/runs/<%= runId %>/preview?patchRequestId=<%= patchRequestId %>">Refresh</a></p>
      <p class="hdr"><a href="/runs/<%= runId %>/select">Back to selection</a></p>
      <script>
        // Auto-refresh every 5s until preview is ready
        setTimeout(function(){ window.location.reload(); }, 5000);
      </script>
    <% } else { %>
      <% const _q = (typeof query !== 'undefined' && query) ? query : {}; %>
      <div id="diff-summary" class="diffSummary"></div>
      <% if (patch.status === 'preview_partial') { %>
        <div class="hdr" style="color:#f0883e;background:#2d2013;padding:12px;border-radius:6px;border:1px solid #6e5a33;margin:12px 0;">‚è≥ Building preview... Some files may still be processing. This page will auto-refresh.</div>
      <% } %>
      <div id="file-header" class="fileHdr"></div>
      <div id="change-summary" style="display:none;"></div>
      <table class="codeTbl" id="diff-table" style="display:none;">
        <thead>
          <tr>
            <th>Original</th>
            <th>Improved</th>
          </tr>
        </thead>
        <tbody id="diff-body"></tbody>
      </table>

      <div class="actions" id="nav-actions" style="display:none;">
        <a class="btn" id="btn-prev" href="#">Previous file</a>
        <a class="btn" id="btn-next" href="#">Next file</a>
        <form method="post" action="/runs/<%= runId %>/patches/apply" id="apply-form" style="display:inline;">
          <input type="hidden" name="patchRequestId" value="<%= patchRequestId %>">
          <button class="btn btn-primary" type="submit">‚úì Apply Fixes</button>
        </form>
      </div>


      <script>
        (async function(){
          const fileHeader = document.getElementById('file-header');
          const diffBody = document.getElementById('diff-body');
          const diffTable = document.getElementById('diff-table');
          const summary = document.getElementById('diff-summary');
          const changeSummaryEl = document.getElementById('change-summary');
          const nav = document.getElementById('nav-actions');
          const btnPrev = document.getElementById('btn-prev');
          const btnNext = document.getElementById('btn-next');
          const applyForm = document.getElementById('apply-form');
          const qs = new URLSearchParams(window.location.search);
          let idx = parseInt(qs.get('i') || '0', 10) || 0;

          function escapeHtml(s){
            return String(s || '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]));
          }

          async function fetchFiles(){
            const r = await fetch(`/runs/<%= runId %>/patches/<%= patchRequestId %>/files`);
            if (!r.ok) return { files: [], expected: 0, status: 'unknown' };
            return r.json();
          }
          async function fetchFile(file, doProcess){
            const url = `/runs/<%= runId %>/patches/<%= patchRequestId %>/file?file=${encodeURIComponent(file)}${doProcess?'&process=1':''}`;
            const r = await fetch(url);
            if (!r.ok) return { ready:false };
            return r.json();
          }

          const meta = await fetchFiles();
          const files = meta.files || [];
          const totalFiles = files.length;
          const expected = meta.expected || totalFiles;
          summary.textContent = `Files planned: ${expected} ¬∑ Ready: ${files.filter(f=>f.ready).length}`;
          if (!totalFiles){ fileHeader.textContent = 'No files selected.'; return; }
          if (idx < 0) idx = 0; if (idx >= totalFiles) idx = totalFiles-1;

          async function renderIndex(i){
            const f = files[i];
            fileHeader.innerHTML = `File: <code>${escapeHtml(f.file)}</code> (${i+1} of ${totalFiles})`;
            diffBody.innerHTML=''; changeSummaryEl.innerHTML=''; changeSummaryEl.style.display='none';
            diffTable.style.display=''; nav.style.display='';
            btnPrev.style.display = (i>0) ? '' : 'none';
            btnNext.style.display = (i<totalFiles-1) ? '' : 'none';
            btnPrev.href = `?patchRequestId=<%= patchRequestId %>&i=${i-1}`;
            btnNext.href = `?patchRequestId=<%= patchRequestId %>&i=${i+1}`;
            applyForm.style.display = (i===totalFiles-1) ? 'inline' : 'none';

            // Request processing if not ready
            let data = await fetchFile(f.file, true);
            const start = Date.now();
            while (!data.ready && (Date.now()-start) < 60000){
              await new Promise(r=>setTimeout(r, 2000));
              data = await fetchFile(f.file, false);
            }
            if (!data.ready){
              diffBody.innerHTML = `<tr><td colspan=2 class=\"panel\"><div class=\"codeBlk\"><div class=\"codeCol\">Processing... still preparing this file</div></div></td></tr>`;
              return;
            }
            
            // Render change summary with typing animation
            if (data.changeSummary && data.changeSummary.patches && data.changeSummary.patches.length > 0) {
              changeSummaryEl.style.display = 'block';
              const summaryHTML = `<div style="font-weight:600;margin-bottom:10px;font-size:15px;">üìù What Changed:</div>`;
              changeSummaryEl.innerHTML = summaryHTML;
              
              // Type out each change one by one
              for (let i = 0; i < data.changeSummary.patches.length; i++) {
                const patch = data.changeSummary.patches[i];
                const changeText = `<div style="margin:6px 0;padding-left:4px;line-height:1.5;">‚Ä¢ <span style="color:#58a6ff;">Line ${patch.line}:</span> ${escapeHtml(patch.reason || 'Applied fix')}</div>`;
                await new Promise(resolve => setTimeout(resolve, 60)); // Typing delay per change
                changeSummaryEl.innerHTML += changeText;
              }
              
              // Wait a bit before showing code
              await new Promise(resolve => setTimeout(resolve, 150));
            }
            
            // Render side-by-side with typing animation
            const left = String(data.originalText||'').split(/\r?\n/);
            const right = String(data.improvedText||'').split(/\r?\n/);
            const maxLen = Math.max(left.length, right.length);
            diffBody.innerHTML = '';
            
            // Typing animation - render lines progressively
            const linesPerBatch = 5; // Show 5 lines at a time for smooth feel
            const batchDelay = 30;   // 30ms between batches
            
            for (let j=0; j<maxLen; j+=linesPerBatch){
              await new Promise(resolve => setTimeout(resolve, batchDelay));
              
              for (let k=0; k<linesPerBatch && (j+k)<maxLen; k++){
                const lineNum = j + k;
                const l = left[lineNum] || '';
                const r = right[lineNum] || '';
                const eq = l === r;
                const tr = document.createElement('tr');
                tr.className = 'typing-line';
                const tdL = document.createElement('td'); tdL.className = 'panel';
                const tdR = document.createElement('td'); tdR.className = 'panel';
                tdL.innerHTML = `<div class=\"codeBlk\"><div class=\"lnCol\">${lineNum+1}</div><div class=\"codeCol ${eq?'':'removed'}\">${escapeHtml(l)}</div></div>`;
                tdR.innerHTML = `<div class=\"codeBlk\"><div class=\"lnCol\">${lineNum+1}</div><div class=\"codeCol ${eq?'':'added'}\">${escapeHtml(r)}</div></div>`;
                tr.appendChild(tdL); tr.appendChild(tdR);
                diffBody.appendChild(tr);
                // Trigger animation
                requestAnimationFrame(() => {
                  tr.classList.add('typing-complete');
                });
              }
            }
          }

          await renderIndex(idx);
        })();
      </script>
    <% } %>
    </div>
  </body>
</html>
