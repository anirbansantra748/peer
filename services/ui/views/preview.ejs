<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title><%= title %></title>
    <style>
      body { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; padding: 20px; }
      .status { padding: 6px 10px; border-radius: 4px; background: #eef; display: inline-block; font-family: system-ui, Arial, sans-serif; }
      .hdr { font-family: system-ui, Arial, sans-serif; }
      .fileHdr { font-weight: 600; margin: 8px 0; font-family: system-ui, Arial, sans-serif; }
      .diffSummary { margin: 8px 0 16px; font-family: system-ui, Arial, sans-serif; color: #333; }
      .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; }
      .panel { border: 1px solid #ddd; background: #fafbfc; border-radius: 4px; overflow: auto; }
      .codeTbl { width: 100%; border-collapse: collapse; }
      .codeTbl th { background: #f0f3f6; border-bottom: 1px solid #ddd; padding: 6px 8px; text-align: left; font-weight: 600; font-family: system-ui, Arial, sans-serif; }
      .codeTbl td { vertical-align: top; padding: 0; }
      .codeBlk { display: grid; grid-template-columns: 56px 1fr; }
      .lnCol { background: #f6f8fa; border-right: 1px solid #eaeef2; color: #6a737d; text-align: right; padding: 6px 8px; }
      .codeCol { padding: 6px 8px; white-space: pre; }
      .removed { background: #ffeaea; }
      .added { background: #eaffea; }
      .actions { margin-top: 12px; font-family: system-ui, Arial, sans-serif; }
      .btn { display: inline-block; padding: 6px 10px; border: 1px solid #ccc; border-radius: 4px; text-decoration: none; color: #222; background: #fff; }
      .btn + .btn { margin-left: 8px; }
      details { margin-top: 16px; }
      details > summary { cursor: pointer; font-weight: 600; font-family: system-ui, Arial, sans-serif; }
      /* Typing animation */
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
      }
      .typing-line {
        animation: fadeIn 0.3s ease-out;
        opacity: 0;
      }
      .typing-complete { opacity: 1; }
    </style>
  </head>
  <body>
    <h1 class="hdr">Preview ‚Äî Run <%= runId %></h1>
    <p class="hdr">Patch Request: <code><%= patchRequestId %></code></p>
    <p class="hdr">Status: <span class="status"><%= patch.status %></span></p>

    <% if (!(patch.status === 'preview_ready' || patch.status === 'preview_partial')) { %>
      <p class="hdr">Preview is not ready yet. <a href="/runs/<%= runId %>/preview?patchRequestId=<%= patchRequestId %>">Refresh</a></p>
      <p class="hdr"><a href="/runs/<%= runId %>/select">Back to selection</a></p>
      <script>
        // Auto-refresh every 5s until preview is ready
        setTimeout(function(){ window.location.reload(); }, 5000);
      </script>
    <% } else { %>
      <% const _q = (typeof query !== 'undefined' && query) ? query : {}; %>
      <div id="diff-summary" class="diffSummary"></div>
      <% if (patch.status === 'preview_partial') { %>
        <div class="hdr" style="color:#8a6d3b;">Building preview... Some files may still be processing. This page will auto-refresh.</div>
      <% } %>
      <div id="file-header" class="fileHdr"></div>
      <div id="change-summary" class="hdr" style="margin:16px 0;padding:12px;background:#f8f9fa;border-left:4px solid #0066cc;border-radius:4px;display:none;"></div>
      <table class="codeTbl" id="diff-table" style="display:none;">
        <thead>
          <tr>
            <th>Original</th>
            <th>Improved</th>
          </tr>
        </thead>
        <tbody id="diff-body"></tbody>
      </table>

      <div class="actions" id="nav-actions" style="display:none;">
        <a class="btn" id="btn-prev" href="#">Previous file</a>
        <a class="btn" id="btn-next" href="#">Next file</a>
        <form method="post" action="/runs/<%= runId %>/patches/apply" id="apply-form" style="display:inline;">
          <input type="hidden" name="patchRequestId" value="<%= patchRequestId %>">
          <button class="btn" type="submit">Apply Preview</button>
        </form>
      </div>

      <details>
        <summary>Show unified diff for this file</summary>
        <pre><code id="udiff"></code></pre>
      </details>

      <script>
        (async function(){
          const fileHeader = document.getElementById('file-header');
          const diffBody = document.getElementById('diff-body');
          const diffTable = document.getElementById('diff-table');
          const summary = document.getElementById('diff-summary');
          const changeSummaryEl = document.getElementById('change-summary');
          const nav = document.getElementById('nav-actions');
          const btnPrev = document.getElementById('btn-prev');
          const btnNext = document.getElementById('btn-next');
          const applyForm = document.getElementById('apply-form');
          const udiffEl = document.getElementById('udiff');
          const qs = new URLSearchParams(window.location.search);
          let idx = parseInt(qs.get('i') || '0', 10) || 0;

          function escapeHtml(s){
            return String(s || '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]));
          }

          async function fetchFiles(){
            const r = await fetch(`/runs/<%= runId %>/patches/<%= patchRequestId %>/files`);
            if (!r.ok) return { files: [], expected: 0, status: 'unknown' };
            return r.json();
          }
          async function fetchFile(file, doProcess){
            const url = `/runs/<%= runId %>/patches/<%= patchRequestId %>/file?file=${encodeURIComponent(file)}${doProcess?'&process=1':''}`;
            const r = await fetch(url);
            if (!r.ok) return { ready:false };
            return r.json();
          }

          const meta = await fetchFiles();
          const files = meta.files || [];
          const totalFiles = files.length;
          const expected = meta.expected || totalFiles;
          summary.textContent = `Files planned: ${expected} ¬∑ Ready: ${files.filter(f=>f.ready).length}`;
          if (!totalFiles){ fileHeader.textContent = 'No files selected.'; return; }
          if (idx < 0) idx = 0; if (idx >= totalFiles) idx = totalFiles-1;

          async function renderIndex(i){
            const f = files[i];
            fileHeader.innerHTML = `File: <code>${escapeHtml(f.file)}</code> (${i+1} of ${totalFiles})`;
            diffBody.innerHTML=''; udiffEl.textContent=''; changeSummaryEl.innerHTML=''; changeSummaryEl.style.display='none';
            diffTable.style.display=''; nav.style.display='';
            btnPrev.style.display = (i>0) ? '' : 'none';
            btnNext.style.display = (i<totalFiles-1) ? '' : 'none';
            btnPrev.href = `?patchRequestId=<%= patchRequestId %>&i=${i-1}`;
            btnNext.href = `?patchRequestId=<%= patchRequestId %>&i=${i+1}`;
            applyForm.style.display = (i===totalFiles-1) ? 'inline' : 'none';

            // Request processing if not ready
            let data = await fetchFile(f.file, true);
            const start = Date.now();
            while (!data.ready && (Date.now()-start) < 60000){
              await new Promise(r=>setTimeout(r, 2000));
              data = await fetchFile(f.file, false);
            }
            if (!data.ready){
              diffBody.innerHTML = `<tr><td colspan=2 class=\"panel\"><div class=\"codeBlk\"><div class=\"codeCol\">Processing... still preparing this file</div></div></td></tr>`;
              return;
            }
            
            // Render change summary with typing animation
            if (data.changeSummary && data.changeSummary.patches && data.changeSummary.patches.length > 0) {
              changeSummaryEl.style.display = 'block';
              const summaryHTML = `<div style="font-weight:600;margin-bottom:8px;">üìù Changes Summary:</div>`;
              changeSummaryEl.innerHTML = summaryHTML;
              
              // Type out each change one by one
              for (let i = 0; i < data.changeSummary.patches.length; i++) {
                const patch = data.changeSummary.patches[i];
                const changeText = `<div style="margin:4px 0;padding-left:8px;">‚Ä¢ Line ${patch.line}: ${escapeHtml(patch.reason || 'Applied fix')}</div>`;
                await new Promise(resolve => setTimeout(resolve, 80)); // Typing delay per change
                changeSummaryEl.innerHTML += changeText;
              }
              
              // Show AI model info
              const modelInfo = `<div style="margin-top:8px;font-size:0.85em;color:#666;padding-left:8px;">‚ú® Generated by ${escapeHtml(data.changeSummary.model || 'AI')}</div>`;
              await new Promise(resolve => setTimeout(resolve, 50));
              changeSummaryEl.innerHTML += modelInfo;
              
              // Wait a bit before showing code
              await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            // Render side-by-side with ChatGPT-style typing animation
            const left = String(data.originalText||'').split(/\r?\n/);
            const right = String(data.improvedText||'').split(/\r?\n/);
            const maxLen = Math.max(left.length, right.length);
            diffBody.innerHTML = '';
            udiffEl.textContent = String(data.unifiedDiff || '');
            
            // Typing animation - render lines progressively
            const linesPerBatch = 3; // Show 3 lines at a time for smooth feel
            const batchDelay = 50;   // 50ms between batches (adjust for speed)
            
            for (let j=0; j<maxLen; j+=linesPerBatch){
              await new Promise(resolve => setTimeout(resolve, batchDelay));
              
              for (let k=0; k<linesPerBatch && (j+k)<maxLen; k++){
                const lineNum = j + k;
                const l = left[lineNum] || '';
                const r = right[lineNum] || '';
                const eq = l === r;
                const tr = document.createElement('tr');
                tr.className = 'typing-line';
                const tdL = document.createElement('td'); tdL.className = 'panel';
                const tdR = document.createElement('td'); tdR.className = 'panel';
                tdL.innerHTML = `<div class=\"codeBlk\"><div class=\"lnCol\">${lineNum+1}</div><div class=\"codeCol ${eq?'':'removed'}\">${escapeHtml(l)}</div></div>`;
                tdR.innerHTML = `<div class=\"codeBlk\"><div class=\"lnCol\">${lineNum+1}</div><div class=\"codeCol ${eq?'':'added'}\">${escapeHtml(r)}</div></div>`;
                tr.appendChild(tdL); tr.appendChild(tdR);
                diffBody.appendChild(tr);
                // Trigger animation
                requestAnimationFrame(() => {
                  tr.classList.add('typing-complete');
                });
              }
            }
          }

          await renderIndex(idx);
        })();
      </script>
    <% } %>
  </body>
</html>
